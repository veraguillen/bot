"""add session_explicitly_ended to user_states

Revision ID: f493c28060bd
Revises: 
Create Date: 2025-06-04 13:41:58.737162

"""
from sqlalchemy import inspect
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f493c28060bd'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def safe_drop_table(table_name: str, **kwargs) -> None:
    """Safely drop a table if it exists."""
    conn = op.get_bind()
    inspector = inspect(conn)
    if table_name in inspector.get_table_names():
        op.drop_table(table_name, **kwargs)


def safe_drop_constraint(constraint_name: str, table_name: str, **kwargs) -> None:
    """Safely drop a constraint if it exists."""
    conn = op.get_bind()
    inspector = inspect(conn)
    constraints = inspector.get_foreign_keys(table_name)
    constraint_exists = any(c['name'] == constraint_name for c in constraints)
    if constraint_exists:
        op.drop_constraint(constraint_name, table_name, **kwargs)


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop foreign key constraint if it exists
    safe_drop_constraint('messages_conversation_id_fkey', 'messages')
    
    # Drop tables in the correct order (tables with foreign keys first)
    safe_drop_table('messages')
    safe_drop_table('conversations')
    safe_drop_table('test_encoding')
    safe_drop_table('companies_backup_20240604')
    safe_drop_table('companies_backup_encoding_issue')
    safe_drop_table('companies_backup_raw')
    op.alter_column('companies', 'name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.drop_constraint('companies_name_unique', 'companies', type_='unique')
    op.create_index(op.f('ix_companies_id'), 'companies', ['id'], unique=False)
    op.create_index(op.f('ix_companies_name'), 'companies', ['name'], unique=True)
    op.drop_column('companies', 'updated_at')
    op.drop_column('companies', 'description')
    op.drop_column('companies', 'created_at')
    op.add_column('user_states', sa.Column('session_explicitly_ended', sa.Boolean(), nullable=False))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('user_states', 'session_explicitly_ended')
    op.add_column('companies', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('companies', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('companies', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_companies_name'), table_name='companies')
    op.drop_index(op.f('ix_companies_id'), table_name='companies')
    op.create_unique_constraint('companies_name_unique', 'companies', ['name'])
    op.alter_column('companies', 'name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.create_table('companies_backup_raw',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True)
    )
    op.create_table('messages',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('conversation_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], name='messages_conversation_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='messages_pkey')
    )
    op.create_table('companies_backup_encoding_issue',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True)
    )
    op.create_table('companies_backup_20240604',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True)
    )
    op.create_table('conversations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('last_message_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='conversations_company_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='conversations_pkey')
    )
    op.create_table('test_encoding',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('texto', sa.TEXT(), autoincrement=False, nullable=True)
    )
    # ### end Alembic commands ###
